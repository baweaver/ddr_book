== Starting Rails

To start a deep-dive the best thing to do is to start at the beginning. What
we want to learn is how Rails boots up and serves requests. In a local
development environment, on a brand new Rails application, the way to boot up
a Rails application is with this command:

----
rails s
----

If that command doesn't work for you, make sure you have installed Rails first:

----
gem install rails
----

If that command doesn't work, make sure you have installed Ruby first.

We know the general gist of what this command does: it starts a Rails server.
But what is it _really_ doing? To find out, we're going to need to run this
command in a real Rails application, so let's create one of those now and name
it inventively "init_book":

----
rails new init_book
----

Now that we have our application up, let's see what happens when we run that
`rails s` command. We'll see this output:

----
=> Booting WEBrick
=> Rails 4.2.1 application starting in development on http://localhost:3000
=> Run `rails server -h` for more startup options
=> Ctrl-C to shutdown server
[timestamp] INFO  WEBrick 1.3.1
[timestamp] INFO  ruby 2.1.5 (2014-11-13) [x86_64-darwin14.0]
[timestamp] INFO  WEBrick::HTTPServer#start: pid=9901 port=3000
----

You're probably already familiar with that output -- or something very similar
to it -- already. Of course when we go to http://localhost:3000 in our browser
we'll see the very familiar "Welcome Aboard" page.

image::ch01/images/welcome_aboard.png[]

How does this command work? We can find out on any UNIX system by running the
`which` command:

----
which rails
----

The `which` utility will tell us where a program lives in the user's `$PATH`.
If you're on Windows, you probably have something like this but we're not
Windows users, so you'll have to figure that out yourself.

On my machine, this prints out this:

----
/Users/ryanbigg/.gem/ruby/2.2.2/bin/rails
----

For you it might be something very similar, or very different. What that path
is isn't necessarily important in this case. It's good to know that the `bin`
directory was added to your `$PATH` by whatever installed Ruby for you. What
is ultimately important is what's inside that file. 

=== [somewhere]/bin/rails

Let's open this file now and see:

[source, ruby]
.[somewhere]/bin/rails
----
#!/usr/bin/env ruby
#
# This file was generated by RubyGems.
#
# The application 'railties' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require 'rubygems'

version = ">= 0"

if ARGV.first
  str = ARGV.first
  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
  if str =~ /\A_(.*)_\z/ and Gem::Version.correct?($1) then
    version = $1
    ARGV.shift
  end
end

gem 'railties', version
load Gem.bin_path('railties', 'rails', version)
----

This file is an executable and uses the shebang [footnote: Bash Shebang:
http://en.wikipedia.org/wiki/Shebang_%28Unix%29] to parse the remainder of the
program through a Ruby interpreter. Without this line, it would be interpreted
as whatever shell scripting language you're using. That's probably going to be
Bash unless you're one of those hipster types that use zsh.

The next non-commented thing in this file is a require to `rubygems`. This
provides us with the RubyGem classes + methods which are used later on this
file.

After that, there's a bit of a dance in order to determine if we've specified
a version for this `rails` command. What this `if ARGV.first` code does is
enable this feature:

----
rails _4.2.0_ new app
----

It allows you to load a _different_ version of Rails and run that instead of
whatever RubyGems would pick up by default. The code checks to see if the
first argument (`ARGV.first`) matches this regular expression: `/\A_(.*)_\z/`.
If it does, _and_ if that looks like a "correct" version according to RubyGems
[footnote: For what RubyGems considers a "correct" version number, read these
code comments from `Gem::Version`: http://git.io/vfs0Y], that version is used
for what comes next.

What comes next is these two lines which really kickstart the whole process:

----
gem 'railties', version
load Gem.bin_path('railties', 'rails', version)
----

If `version` has been specified, then that version of the `railties` gem will
be loaded. The final line in this file looks in the `bin` path of the specific
version of the `railties` gem and loads the `rails` script. We can find what
script that's finding by running this command:

----
ruby -rubygems -e "puts Gem.bin_path('railties', 'rails', '>=0')"
----

You can change the `>=0` to a particular version of Rails and see the path
change; providing of course that you have that specific version of the
`railties` gem installed. On my machine, this command prints out this:

----
/Users/ryanbigg/.gem/ruby/2.2.2/gems/railties-4.2.1/bin/rails
----

Let's look at what this file does.

=== [railties gem]/bin/rails

The contents of this file are this:

----
#!/usr/bin/env ruby

git_path = File.expand_path('../../../.git', __FILE__)

if File.exist?(git_path)
  railties_path = File.expand_path('../../lib', __FILE__)
  $:.unshift(railties_path)
end
require "rails/cli"
----







